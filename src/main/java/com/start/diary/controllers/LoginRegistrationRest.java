package com.start.diary.controllers;

import com.start.diary.entities.RequestRegistrationForm;
import com.start.diary.entities.Teacher;
import com.start.diary.entities.dto.CaptchaResponseDto;
import com.start.diary.entities.dto.ServiceResponse;
import com.start.diary.repos.TeacherRepo;
import com.start.diary.service.LoginRegistrationService;
import com.start.diary.service.RegistrationService;
import com.start.diary.service.TeacherService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import java.io.IOException;
import java.util.*;

@RestController
public class LoginRegistrationRest {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private static String CAPTCHA_URL="https://www.google.com/recaptcha/api/siteverify?secret=%s&response=%s";
    @Autowired
    TeacherService teacherService;
    @Autowired
    private RestTemplate restTemplate;

    //its value from properties see
    @Value("${upload.path}")
    private String uploadPath;
    @Value("${recaptcha.secret}")
    private String secret;
    @Autowired
    TeacherRepo teacherRepo;
    @Autowired
    LoginRegistrationService loginRegistrationService;
    @Autowired
    RegistrationService registrationService;

    @GetMapping("/lo")
    public ResponseEntity<Object> lo(@RequestParam String username){
        System.out.println("tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
        Map<String,String> map = new HashMap<>();
        ServiceResponse<Map<String,String>> response = new ServiceResponse<>("success",map);

        loginRegistrationService.loginValidation(username,map);

        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @PostMapping("/test")
    public ResponseEntity<Object> testnew(/*@RequestParam("filename") MultipartFile file,
                                           @Valid RequestRegistrationForm name*/
                                     @RequestParam("name") String name
    ) {


        Map<String, String> map = new HashMap<>();
        ServiceResponse<Map<String, String>> response = new ServiceResponse<>("success", map);
        map.put("kek", "kek");
        //System.out.println(file != null && !file.getOriginalFilename().isEmpty());
        System.out.println(name);

        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @PostMapping("/registrationPost")
    public ResponseEntity<Object> test(@RequestParam("file") MultipartFile file,
                                       @RequestParam("g-recaptcha-response") String captchaResponse,
                                       @Valid Teacher teacher,
                                       Errors errors
    ) throws IOException {
       // System.out.println(file != null && !file.getOriginalFilename().isEmpty());

        Map<String,String> map = new HashMap<>();
        ServiceResponse<Map<String,String>> response = new ServiceResponse<>("success",map);
        map.put("kek","kek");


        registrationService.handlingCaptchaAndFile(captchaResponse,file,map,teacher);
        registrationService.addTeacherRegistration(teacher,map,teacher.getPasswordConfirm(),errors);
        //reCaptcha
      /*  String url = String.format(CAPTCHA_URL, secret, captchaResponse);
        CaptchaResponseDto captchaResponseDto = restTemplate.postForObject(url, Collections.emptyList(), CaptchaResponseDto.class);
        if (captchaResponseDto != null && !captchaResponseDto.isSuccess()) {
            map.put("captchaError", "Fill captcha");
        }*/


            //passwordConfirmEqualError we added manually, so we write this "teacher.getPassword().compareTo(teacher.getPasswordConfirm())!=0"
        if (errors.hasErrors() || teacher.getPassword().compareTo(teacher.getPasswordConfirm())!=0){
            response.setStatus("badRequest");
            map.putAll(ControllerUtils.getErrors(errors));
            //only if fileds as: password and passwordConfrim aren't empty
            //and value of these fields are different
            if (teacher.getPassword().compareTo(teacher.getPasswordConfirm())!=0 && !map.containsKey("passwordError") && !map.containsKey("passwordConfirmError")){
                map.put( "passwordConfirmEqualError" , "Passwords aren't equal" );//*@Valid  Teacher teacher, Errors errors*//*
            }
            System.out.println("Map:");
            System.out.println(map);


            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }


        return new ResponseEntity<>(response, HttpStatus.OK);
    }


    @PostMapping(value = "/registration2",consumes = {MediaType.APPLICATION_JSON_VALUE})
    public String /*ResponseEntity<Object>*/ registrationPost(
            //@RequestParam("file") MultipartFile file,
            // @RequestParam("passwordConfirm") String passwordConfirm,
            //  @RequestParam("g-recaptcha-response") String captchaResponse,
            /*@Valid*/ //Teacher teacher
            //11 video 5.06
            //there is one subtlety
            // BindingResult bindingResult
    )
            throws IOException {
        /*System.out.println("Reigrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr");
        Map<String,String> map = new HashMap<>();
        map.put("test","test1");
        ServiceResponse<Map<String,String>> response = new ServiceResponse<>("success",map);*/

        // registrationService.handlingCaptchaAndFile(captchaResponse,file,map,teacher);
        //reCaptcha
/*        String url = String.format(CAPTCHA_URL, secret, captchaResponse);
        CaptchaResponseDto response = restTemplate.postForObject(url, Collections.emptyList(), CaptchaResponseDto.class);
        if (!response.isSuccess()) {
            model.addAttribute("captchaError", "Fill captcha");
        }
        //reCaptcha

        if (file != null && !file.getOriginalFilename().isEmpty()) {
            File uploadDir = new File(uploadPath);

            if (!uploadDir.exists()) {
                uploadDir.mkdir();
            }

            String uuidFile = UUID.randomUUID().toString();
            String resultFilename = uuidFile + "." + file.getOriginalFilename();

            file.transferTo(new File(uploadPath + "/" + resultFilename));

            teacher.setFilename(resultFilename);
        }*/



        //boolean v=registrationService.addTeacherRegistration(teacher,map,passwordConfirm,bindingResult) && !map.containsKey("captchaError");



        return /*new ResponseEntity<>(response, HttpStatus.OK)*/ "Str";
    }
}
